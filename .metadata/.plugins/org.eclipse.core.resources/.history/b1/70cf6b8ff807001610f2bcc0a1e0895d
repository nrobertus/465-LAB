;*******************************************************************
;* This stationery serves as the framework for a user application. *
;* For a more comprehensive program that demonstrates the more     *
;* advanced functionality of this processor, please see the        *
;* demonstration applications, located in the examples             *
;* subdirectory of the "Freescale CodeWarrior for HC08" program    *
;* directory.                                                      *
;*******************************************************************

; Include derivative-specific definitions
            INCLUDE 'derivative.inc'


; export symbols
            XDEF _Startup, main, n, t, m, b, i_temp, XOR_Mask
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on



            XREF __SEG_END_SSTACK, get_input, lcd_init, lcd_clear_display, mode_0, mode_1, mode_2 ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition

            n: EQU $7C
            t: EQU $71
            m: EQU $72
            b: EQU $73
            i_temp: EQU $74
            XOR_Mask: EQU %00010000


; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
			CLI			; enable interrupts

			LDA SOPT1
            ORA #%00000001	;enable reset switch
            AND #%01111111	;disable watchdog
            STA SOPT1

            BSET 0, PTADD			; Set data direction for port A to outputs.
  			BSET 1, PTADD
  			BSET 2, PTADD
  			BSET 3, PTADD
  			BCLR 2, PTADD
  			BCLR 2, PTAD			; Clear all of port A
  			BCLR 3, PTAD
  			BCLR 4, PTAD
  			BCLR 5, PTAD
  			MOV #$FF, PTBDD			; set data direction for port B
  			MOV #%00000000, $82		; initial heartbeat LED.


  			MOV #$01, PTBD
  			BSET 3, PTBD
  			BCLR 3, PTBD

  			MOV #0, $95
  			MOV #0, $96
  			MOV #$30, $97

  			MOV #%10111110, $A0

        	JSR lcd_init
        	
        	JSR lcd_clear_display
        	
        	JSR mode_0

main_function:
			JSR get_input
    		LDA $70					; Load the pattern from memory
			CMP #%11100111			
			BEQ goto_mode_0			
			CMP #%11101011			
			BEQ goto_mode_1
			
    		BRA main_function
    		
goto_mode_0:
		JSR lcd_clear_display
		JSR lcd_clear_display
		JSR lcd_clear_display
		JSR mode_0
		JSR main_function

goto_mode_1:
		JSR lcd_clear_display
		JSR lcd_clear_display
		JSR lcd_clear_display
		JSR mode_1
		JSR main_function

goto_mode_2:
		JSR lcd_clear_display
		JSR lcd_clear_display
		JSR lcd_clear_display
		JSR mode_2
		JSR main_function
