; Include derivative-specific definitions
            INCLUDE 'derivative.inc'


; export symbols
            XDEF mode_0, mode_1, mode_2
            ; we export both '_Startup' and 'main' as symbols. Either can
            ; be referenced in the linker .prm file or from C/C++ later on



            XREF __SEG_END_SSTACK,SUB_delay, SUB_delay_cnt, PTBDD_Upper_output, lm92_write_lcd_C,lm92_read_temp, i2c_start, i2c_rx_byte, i2c_tx_byte, i2c_stop, PTBDD_Upper_input, toggle_clock, delay, BF_check,  n, t, m, b, lcd_clear, lcd_char, lcd_goto_row1  ; symbol defined by the linker for the end of the stack


; variable/data section
MY_ZEROPAGE: SECTION  SHORT         ; Insert here your data definition

; code section
MyCode:     SECTION
main:
_Startup:
            LDHX   #__SEG_END_SSTACK ; initialize the stack pointer
            TXS
			CLI			; enable interrupts

mode_0:

		JSR print_TEC_tag
		
		LDA #$4F			; Write 'O'
		JSR lcd_char
		
		LDA #$66			; Write 'f'
		JSR lcd_char
		
		LDA #$66			; Write 'f'
		JSR lcd_char
		
		JSR lcd_goto_row1
		
		JSR print_temp_tag
		
		
		JSR lm92_read_temp
		
		JSR SUB_delay
		
		JSR lm92_write_lcd_C
		
		JSR Delay_Loop
		
    	RTS

mode_1:

    		JSR print_TEC_tag
    		
    		LDA #$48				; 'H'
	  		JSR lcd_char
		
			LDA #$65				; 'e'
			JSR lcd_char
			
			LDA #$61				; 'a'
			JSR lcd_char
			
			LDA #$74				; 't'
			JSR lcd_char
			
			JSR lcd_goto_row1
			
			JSR print_temp_tag
			
			JSR lm92_read_temp
			
			JSR lm92_write_lcd_C
			
			RTS

mode_2:

      		JSR print_TEC_tag
      		
      		LDA #$43				; 'C'
			JSR lcd_char
			
			LDA #$6F				; 'o'
			JSR lcd_char
			
			LDA #$6F				; 'o'
			JSR lcd_char
			
			LDA #$6C				; 'l'
			JSR lcd_char
			
			JSR lcd_goto_row1
			
			JSR print_temp_tag
			
	  		RTS

print_TEC_tag:
		
		LDA #$54				; 'T'
		JSR lcd_char

		LDA #$45				; 'E'
		JSR lcd_char

		LDA #$43				; 'C'
		JSR lcd_char

		LDA #$20				; ' '
		JSR lcd_char

		LDA #$73				; 's'
		JSR lcd_char

		LDA #$74				; 't'
		JSR lcd_char

		LDA #$61				; 'a'
		JSR lcd_char

		LDA #$74				; 't'
		JSR lcd_char

		LDA #$65				; 'e'
		JSR lcd_char

		LDA #$3A				; ':'
		JSR lcd_char

		LDA #$20				; ' '
		JSR lcd_char

		RTS

print_temp_tag:
		LDA #$54				; 'T'
		JSR lcd_char
			
		LDA #$39				; '9'
		JSR lcd_char
			
		LDA #$32				; '2'
		JSR lcd_char
			
		LDA #$3A				; ':'
		JSR lcd_char
		
		LDA #$20				; ' '
		JSR lcd_char
		
		RTS
		
Delay_Loop:
			LDA #40					; Load A with 65
			STA t					; store A into t, m, and b
			STA m
			STA b
			
		Top:
			feed_watchdog
			LDA t					
			SUB #1					; decrement A
			STA t					; store back into memory
			LDA #40					
			STA m					; store 65 into middle if not equal to zero and go to middle
		Middle:
			feed_watchdog
			LDA m
			SUB #1					; decrement
			STA m					; store back into m
			BEQ Top					; if equal to 0 go to top
			LDA #40
			STA b					; store 65 into b and go to bottom
		bottom: 
			feed_watchdog	
			LDA b
			SUB #1					; decrement
			STA b					; store back into b 
			BEQ Middle				; if equal to 0 branch to middle
			BRA bottom				; if not 0 branch to bottom
